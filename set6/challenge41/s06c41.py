from rsa import *
from gmpy import invert
from Crypto.Util.number import long_to_bytes,bytes_to_long
import hashlib

known_ciphers = ['451e6974e1dcea316227ae9294dcb741013301d3e3106d2c4a2fa690']

p = 175869037756700402300996578567864898184222903416050460347456127029515753039099935992133326019222457491069709074755296747272763746719200390424153150099132552874967523417124082093319903635383511199284344881825825102097255526191659375882756669487822638912224690335141694907082776585187379532880928338078064221387
q = 168459473435242454775839500261007453666240900451920783781140725861264860758430668777608500012301075872790052971051052360208806965187374146884659494117386428968716367152408713719694491511113429830317493223019164219590209764581059918381621354288478085209144390410064404913603053561461538557987394640250085256699
n = p*q
e = 3

def server(ciphertext):
    et = (p-1)*(q-1)
    d = invert(e,et)
    cipher_hash = hashlib.sha224(str(ciphertext).encode()).hexdigest()
    

    if cipher_hash not in known_ciphers:
        dec = pow(ciphertext,d,n)
        return(dec)
    else:
        return('Nice Try')




if __name__ == "__main__": 
    captured_cipher = 45550375293432009319431446893124072246725369775461331534113181299175870105319589659448
    s = 3
    cipher = (pow(s,e,n) * captured_cipher) % n
    
    int_plain = server(cipher)
    print(int_plain)
    
    plain_text = (int_plain * invert(s,n)) % n

    print(long_to_bytes(plain_text))

